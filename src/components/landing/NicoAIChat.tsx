"use client";

import { useState, useRef, useEffect } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { useLanguage } from '@/contexts/LanguageContext';
import { Send, Bot } from 'lucide-react';
import { motion } from 'framer-motion';

interface Message {
  id: string;
  text: string;
  sender: 'user' | 'bot';
  timestamp: Date;
}

interface NicoAIChatProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

type ConversationStep = 
  | 'ask_service'
  | 'ask_question_1'
  | 'ask_question_2'
  | 'ask_question_3'
  | 'ask_name'
  | 'ask_phone'
  | 'ask_email'
  | 'generate_ticket';

interface UserData {
  language?: string;
  service?: string;
  question1?: string;
  question2?: string;
  question3?: string;
  name?: string;
  phone?: string;
  email?: string;
  ticketNumber?: string;
}

// Language detection function
const detectLanguage = (text: string): 'es' | 'en' | 'pt' => {
  const lowerText = text.toLowerCase();
  
  // Portuguese indicators
  const ptWords = ['ol√°', 'oi', 'obrigado', 'obrigada', 'sim', 'n√£o', 'por favor', 'muito', 'tudo', 'bem', 'voc√™', 'est√°', 'p√°gina', 'preciso', 'gostaria', 'quero'];
  const ptCount = ptWords.filter(word => lowerText.includes(word)).length;
  
  // Spanish indicators
  const esWords = ['hola', 'gracias', 's√≠', 'no', 'por favor', 'mucho', 'necesito', 'quiero', 'p√°gina', 'web', 'letrero', 'dise√±o'];
  const esCount = esWords.filter(word => lowerText.includes(word)).length;
  
  // English indicators
  const enWords = ['hello', 'hi', 'thanks', 'yes', 'no', 'please', 'need', 'want', 'website', 'sign', 'logo', 'design'];
  const enCount = enWords.filter(word => lowerText.includes(word)).length;
  
  // Determine language based on highest count
  if (ptCount > esCount && ptCount > enCount) return 'pt';
  if (enCount > esCount) return 'en';
  return 'es'; // Default to Spanish
};

const getInitialMessage = () => {
  return `üëã Hello! ¬°Hola! Ol√°!

I'm Nico, how can I help you?
Soy Nico, ¬øen qu√© puedo ayudarte?
Sou Nico, como posso ajud√°-lo?`;
};

const getServiceMessage = (lang: 'es' | 'en' | 'pt') => {
  const messages = {
    es: '¬øQu√© servicio necesitas?\n\n1Ô∏è‚É£ Letrero\n2Ô∏è‚É£ Dise√±o de Logo\n3Ô∏è‚É£ P√°gina Web',
    en: 'What service do you need?\n\n1Ô∏è‚É£ Sign\n2Ô∏è‚É£ Logo Design\n3Ô∏è‚É£ Website',
    pt: 'Qual servi√ßo voc√™ precisa?\n\n1Ô∏è‚É£ Letreiro\n2Ô∏è‚É£ Design de Logo\n3Ô∏è‚É£ Site'
  };
  return messages[lang];
};

const getServiceQuestions = (service: string, questionNumber: number, lang: string) => {
  const questions = {
    letrero: {
      es: [
        '¬øEl letrero ser√° para interior o exterior?',
        '¬øQu√© tama√±o aproximado necesitas?\n\nPor ejemplo:\n‚Ä¢ Peque√±o: 12" x 24"\n‚Ä¢ Mediano: 24" x 48"\n‚Ä¢ Grande: 36" x 72"\n‚Ä¢ Personalizado',
        '¬øLo quieres con luz LED o sin luz?'
      ],
      en: [
        'Will the sign be for indoor or outdoor use?',
        'What approximate size do you need?\n\nFor example:\n‚Ä¢ Small: 12" x 24"\n‚Ä¢ Medium: 24" x 48"\n‚Ä¢ Large: 36" x 72"\n‚Ä¢ Custom',
        'Do you want it with LED lighting or without light?'
      ],
      pt: [
        'O letreiro ser√° para uso interno ou externo?',
        'Qual tamanho aproximado voc√™ precisa?\n\nPor exemplo:\n‚Ä¢ Pequeno: 12" x 24"\n‚Ä¢ M√©dio: 24" x 48"\n‚Ä¢ Grande: 36" x 72"\n‚Ä¢ Personalizado',
        'Voc√™ quer com ilumina√ß√£o LED ou sem luz?'
      ]
    },
    logo: {
      es: [
        '¬øYa tienes una idea del estilo de logo que buscas? (moderno, cl√°sico, minimalista, etc.)',
        '¬øQu√© colores prefieres para tu logo?',
        '¬øCu√°l es el nombre de tu empresa o negocio?'
      ],
      en: [
        'Do you already have an idea of the logo style you\'re looking for? (modern, classic, minimalist, etc.)',
        'What colors do you prefer for your logo?',
        'What is the name of your company or business?'
      ],
      pt: [
        'Voc√™ j√° tem uma ideia do estilo de logo que procura? (moderno, cl√°ssico, minimalista, etc.)',
        'Quais cores voc√™ prefere para seu logo?',
        'Qual √© o nome da sua empresa ou neg√≥cio?'
      ]
    },
    web: {
      es: [
        '¬øQu√© tipo de p√°gina web necesitas? (Landing page simple o p√°gina web completa con funcionalidades)',
        '¬øYa tienes contenido e im√°genes preparadas o necesitas ayuda con eso?',
        '¬øNecesitas la p√°gina web urgente o tienes tiempo?'
      ],
      en: [
        'What type of website do you need? (Simple landing page or full website with features)',
        'Do you already have content and images prepared or do you need help with that?',
        'Do you need the website urgently or do you have time?'
      ],
      pt: [
        'Que tipo de site voc√™ precisa? (Landing page simples ou site completo com funcionalidades)',
        'Voc√™ j√° tem conte√∫do e imagens preparados ou precisa de ajuda com isso?',
        'Voc√™ precisa do site com urg√™ncia ou tem tempo?'
      ]
    }
  };

  const serviceKey = service === 'letrero' || service === 'sign' || service === 'letreiro' ? 'letrero' :
                     service === 'logo' || service === 'logo design' || service === 'design de logo' ? 'logo' : 'web';
  const langKey = lang === 'pt' ? 'pt' : lang === 'en' ? 'en' : 'es';
  
  return questions[serviceKey][langKey][questionNumber - 1];
};

const getServiceInfo = (service: string, lang: 'es' | 'en' | 'pt') => {
  const serviceKey = service.toLowerCase().includes('letrero') || service.toLowerCase().includes('sign') || service.toLowerCase().includes('letreiro') ? 'letrero' :
                     service.toLowerCase().includes('logo') ? 'logo' : 'web';
  
  const info = {
    letrero: {
      es: 'üì¶ Informaci√≥n de Entrega:\n‚Ä¢ Tiempo de producci√≥n: 5-7 d√≠as h√°biles\n‚Ä¢ Env√≠o: UPS con tracking\n‚Ä¢ Incluye: Dise√±o, fabricaci√≥n e instalaci√≥n (si es local)',
      en: 'üì¶ Delivery Information:\n‚Ä¢ Production time: 5-7 business days\n‚Ä¢ Shipping: UPS with tracking\n‚Ä¢ Includes: Design, manufacturing and installation (if local)',
      pt: 'üì¶ Informa√ß√µes de Entrega:\n‚Ä¢ Tempo de produ√ß√£o: 5-7 dias √∫teis\n‚Ä¢ Envio: UPS com rastreamento\n‚Ä¢ Inclui: Design, fabrica√ß√£o e instala√ß√£o (se local)'
    },
    logo: {
      es: 'üé® Informaci√≥n del Servicio:\n‚Ä¢ Entrega: 5-7 d√≠as h√°biles\n‚Ä¢ Incluye: M√∫ltiples conceptos, revisiones ilimitadas\n‚Ä¢ Formatos: PNG, JPG, SVG, AI\n‚Ä¢ Archivos enviados por email',
      en: 'üé® Service Information:\n‚Ä¢ Delivery: 5-7 business days\n‚Ä¢ Includes: Multiple concepts, unlimited revisions\n‚Ä¢ Formats: PNG, JPG, SVG, AI\n‚Ä¢ Files sent by email',
      pt: 'üé® Informa√ß√µes do Servi√ßo:\n‚Ä¢ Entrega: 5-7 dias √∫teis\n‚Ä¢ Inclui: M√∫ltiplos conceitos, revis√µes ilimitadas\n‚Ä¢ Formatos: PNG, JPG, SVG, AI\n‚Ä¢ Arquivos enviados por email'
    },
    web: {
      es: 'üíª Informaci√≥n del Proyecto:\n‚Ä¢ Desarrollo: 5-7 d√≠as h√°biles (p√°ginas simples)\n‚Ä¢ Incluye: Dise√±o responsive, hosting primer mes gratis\n‚Ä¢ Soporte t√©cnico incluido\n‚Ä¢ Dominio y contenido personalizado',
      en: 'üíª Project Information:\n‚Ä¢ Development: 5-7 business days (simple pages)\n‚Ä¢ Includes: Responsive design, first month hosting free\n‚Ä¢ Technical support included\n‚Ä¢ Custom domain and content',
      pt: 'üíª Informa√ß√µes do Projeto:\n‚Ä¢ Desenvolvimento: 5-7 dias √∫teis (p√°ginas simples)\n‚Ä¢ Inclui: Design responsivo, primeiro m√™s de hospedagem gr√°tis\n‚Ä¢ Suporte t√©cnico inclu√≠do\n‚Ä¢ Dom√≠nio e conte√∫do personalizado'
    }
  };
  
  return info[serviceKey][lang];
};

export function NicoAIChat({ open, onOpenChange }: NicoAIChatProps) {
  const { language: contextLanguage, setLanguage } = useLanguage();
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [step, setStep] = useState<ConversationStep>('ask_service');
  const [userData, setUserData] = useState<UserData>({});
  const [chatLanguage, setChatLanguage] = useState<string>('es');
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    if (open && messages.length === 0) {
      // Initial greeting - ask for service directly
      addBotMessage(getInitialMessage());
    }
  }, [open]);

  const addBotMessage = (text: string) => {
    const botMessage: Message = {
      id: Date.now().toString() + Math.random(),
      text,
      sender: 'bot',
      timestamp: new Date()
    };
    setMessages((prev) => [...prev, botMessage]);
  };

  const generateTicketNumber = () => {
    return `EG${Date.now().toString().slice(-8)}`;
  };

  const saveTicketToDatabase = async (ticketData: UserData) => {
    try {
      const response = await fetch('/api/tickets', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: ticketData.name,
          email: ticketData.email,
          phone: ticketData.phone,
          service: ticketData.service,
          details: {
            question1: ticketData.question1,
            question2: ticketData.question2,
            question3: ticketData.question3,
          },
          ticketNumber: ticketData.ticketNumber,
          language: ticketData.language,
        }),
      });

      if (!response.ok) {
        console.error('Error saving ticket');
      }
    } catch (error) {
      console.error('Error saving ticket:', error);
    }
  };

  const handleStepResponse = async (userResponse: string) => {
    setIsTyping(true);

    setTimeout(async () => {
      setIsTyping(false);
      const lowerResponse = userResponse.toLowerCase();

      // Detect language from first message
      if (step === 'ask_service' && !userData.language) {
        const detectedLang = detectLanguage(userResponse);
        // Map pt to es since we only support es and en
        const supportedLang = detectedLang === 'pt' ? 'es' : detectedLang as 'es' | 'en';
        setChatLanguage(detectedLang);
        setLanguage(supportedLang);
        setUserData((prev) => ({ ...prev, language: detectedLang }));
      }

      switch (step) {
        case 'ask_service':
          let service = '';
          if (lowerResponse.includes('letrero') || lowerResponse.includes('sign') || lowerResponse.includes('letreiro') || lowerResponse === '1') {
            service = chatLanguage === 'es' ? 'letrero' : chatLanguage === 'pt' ? 'letreiro' : 'sign';
          } else if (lowerResponse.includes('logo') || lowerResponse === '2') {
            service = 'logo';
          } else if (lowerResponse.includes('web') || lowerResponse.includes('p√°gina') || lowerResponse.includes('website') || lowerResponse.includes('site') || lowerResponse === '3') {
            service = chatLanguage === 'es' ? 'p√°gina web' : chatLanguage === 'pt' ? 'site' : 'website';
          } else {
            service = userResponse;
          }
          
          setUserData((prev) => ({ ...prev, service }));
          
          const serviceLangMessages = {
            es: `Excelente elecci√≥n! üëç\n\n${getServiceInfo(service, 'es')}\n\nVamos a hacer algunas preguntas sobre tu ${service}.\n\n${getServiceQuestions(service, 1, chatLanguage)}`,
            en: `Excellent choice! üëç\n\n${getServiceInfo(service, 'en')}\n\nLet's ask some questions about your ${service}.\n\n${getServiceQuestions(service, 1, chatLanguage)}`,
            pt: `Excelente escolha! üëç\n\n${getServiceInfo(service, 'pt')}\n\nVamos fazer algumas perguntas sobre seu ${service}.\n\n${getServiceQuestions(service, 1, chatLanguage)}`
          };
          
          addBotMessage(serviceLangMessages[chatLanguage as 'es' | 'en' | 'pt']);
          setStep('ask_question_1');
          break;

        case 'ask_question_1':
          setUserData((prev) => ({ ...prev, question1: userResponse }));
          addBotMessage(getServiceQuestions(userData.service || '', 2, chatLanguage));
          setStep('ask_question_2');
          break;

        case 'ask_question_2':
          setUserData((prev) => ({ ...prev, question2: userResponse }));
          addBotMessage(getServiceQuestions(userData.service || '', 3, chatLanguage));
          setStep('ask_question_3');
          break;

        case 'ask_question_3':
          setUserData((prev) => ({ ...prev, question3: userResponse }));
          const nameMessages = {
            es: '¬°Perfecto! üìù Ahora necesito tus datos para crear tu ticket de ayuda.\n\n¬øCu√°l es tu nombre completo?',
            en: 'Perfect! üìù Now I need your information to create your help ticket.\n\nWhat is your full name?',
            pt: 'Perfeito! üìù Agora preciso dos seus dados para criar seu ticket de ajuda.\n\nQual √© o seu nome completo?'
          };
          addBotMessage(nameMessages[chatLanguage as 'es' | 'en' | 'pt']);
          setStep('ask_name');
          break;

        case 'ask_name':
          setUserData((prev) => ({ ...prev, name: userResponse }));
          const emailMessages = {
            es: '¬øCu√°l es tu correo electr√≥nico?',
            en: 'What is your email address?',
            pt: 'Qual √© o seu e-mail?'
          };
          addBotMessage(emailMessages[chatLanguage as 'es' | 'en' | 'pt']);
          setStep('ask_email');
          break;

        case 'ask_email':
          setUserData((prev) => ({ ...prev, email: userResponse }));
          const phoneMessages = {
            es: '¬øCu√°l es tu n√∫mero de tel√©fono?',
            en: 'What is your phone number?',
            pt: 'Qual √© o seu n√∫mero de telefone?'
          };
          addBotMessage(phoneMessages[chatLanguage as 'es' | 'en' | 'pt']);
          setStep('ask_phone');
          break;

        case 'ask_phone':
          const ticketNum = generateTicketNumber();
          const finalUserData = { ...userData, phone: userResponse, ticketNumber: ticketNum };
          setUserData(finalUserData);
          
          // Save ticket to database
          await saveTicketToDatabase(finalUserData);
          
          const successMessages = {
            es: `‚úÖ ¬°Ticket creado exitosamente!\n\nüìã N√∫mero de Ticket: #${ticketNum}\n\nüìù Resumen:\n‚Ä¢ Servicio: ${finalUserData.service}\n‚Ä¢ Nombre: ${finalUserData.name}\n‚Ä¢ Email: ${finalUserData.email}\n‚Ä¢ Tel√©fono: ${userResponse}\n\n${getServiceInfo(finalUserData.service || '', 'es')}\n\nNuestro equipo revisar√° tu solicitud y se pondr√° en contacto contigo dentro de las pr√≥ximas 24 horas para confirmar los detalles y el proceso de pago.\n\n¬°Gracias por confiar en Extreme Graphics! üé®`,
            en: `‚úÖ Ticket created successfully!\n\nüìã Ticket Number: #${ticketNum}\n\nüìù Summary:\n‚Ä¢ Service: ${finalUserData.service}\n‚Ä¢ Name: ${finalUserData.name}\n‚Ä¢ Email: ${finalUserData.email}\n‚Ä¢ Phone: ${userResponse}\n\n${getServiceInfo(finalUserData.service || '', 'en')}\n\nOur team will review your request and contact you within the next 24 hours to confirm details and payment process.\n\nThank you for trusting Extreme Graphics! üé®`,
            pt: `‚úÖ Ticket criado com sucesso!\n\nüìã N√∫mero do Ticket: #${ticketNum}\n\nüìù Resumo:\n‚Ä¢ Servi√ßo: ${finalUserData.service}\n‚Ä¢ Nome: ${finalUserData.name}\n‚Ä¢ Email: ${finalUserData.email}\n‚Ä¢ Telefone: ${userResponse}\n\n${getServiceInfo(finalUserData.service || '', 'pt')}\n\nNossa equipe revisar√° sua solicita√ß√£o e entrar√° em contato com voc√™ nas pr√≥ximas 24 horas para confirmar detalhes e processo de pagamento.\n\nObrigado por confiar na Extreme Graphics! üé®`
          };
          
          addBotMessage(successMessages[chatLanguage as 'es' | 'en' | 'pt']);
          setStep('generate_ticket');
          break;

        case 'generate_ticket':
          const helpMessages = {
            es: '¬øHay algo m√°s en lo que pueda ayudarte? üòä',
            en: 'Is there anything else I can help you with? üòä',
            pt: 'H√° algo mais em que eu possa ajud√°-lo? üòä'
          };
          addBotMessage(helpMessages[chatLanguage as 'es' | 'en' | 'pt']);
          break;
      }
    }, 1000 + Math.random() * 1000);
  };

  const handleSendMessage = () => {
    if (!inputValue.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputValue,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages((prev) => [...prev, userMessage]);
    const messageText = inputValue;
    setInputValue('');

    handleStepResponse(messageText);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl h-[600px] flex flex-col p-0 bg-white dark:bg-slate-800 border-border">
        <DialogHeader className="px-6 py-4 border-b bg-white dark:bg-slate-800 border-border">
          <div className="flex items-center gap-3">
            <div className="w-12 h-12 bg-accent rounded-full flex items-center justify-center">
              <Bot className="w-6 h-6 text-white" />
            </div>
            <div>
              <DialogTitle className="text-xl font-black text-text">Nico IA</DialogTitle>
              <div className="text-sm text-muted">
                {chatLanguage === 'es' ? 'Asistente Virtual de Ventas' : 
                 chatLanguage === 'pt' ? 'Assistente Virtual de Vendas' : 
                 'Virtual Sales Assistant'}
              </div>
            </div>
          </div>
        </DialogHeader>

        <div className="flex-1 overflow-y-auto p-6 space-y-4 bg-white dark:bg-slate-800">
          {messages.map((message) => (
            <motion.div
              key={message.id}
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`max-w-[80%] rounded-2xl px-4 py-3 ${
                  message.sender === 'user'
                    ? 'bg-accent text-white'
                    : 'bg-secondary text-text'
                }`}
              >
                <p className="text-sm leading-relaxed whitespace-pre-line">{message.text}</p>
                <div
                  className={`text-xs mt-1 ${
                    message.sender === 'user' ? 'text-white/70' : 'text-muted'
                  }`}
                >
                  {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                </div>
              </div>
            </motion.div>
          ))}
          {isTyping && (
            <div className="flex justify-start">
              <div className="bg-secondary rounded-2xl px-4 py-3">
                <div className="flex gap-1">
                  <div className="w-2 h-2 bg-muted rounded-full animate-bounce" style={{ animationDelay: '0ms' }} />
                  <div className="w-2 h-2 bg-muted rounded-full animate-bounce" style={{ animationDelay: '150ms' }} />
                  <div className="w-2 h-2 bg-muted rounded-full animate-bounce" style={{ animationDelay: '300ms' }} />
                </div>
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>

        <div className="p-4 border-t bg-white dark:bg-slate-800 border-border">
          <div className="flex gap-2">
            <Input
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={
                chatLanguage === 'es' ? 'Escribe tu mensaje...' : 
                chatLanguage === 'pt' ? 'Digite sua mensagem...' : 
                'Type your message...'
              }
              className="flex-1"
            />
            <Button onClick={handleSendMessage} disabled={!inputValue.trim()} className="rounded-full w-12 h-12 p-0">
              <Send className="w-5 h-5" />
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}